buildscript {
    ext.kotlin_version = '1.2.51'
    ext.ktor_version = '0.9.2'

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.4"
    }
}

group 'me.marolt'
version '0.1-SNAPSHOT'

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'kotlin'
apply plugin: 'application'

mainClassName = "me.marolt.configurationserver.web.MainKt"

repositories {
    jcenter()
    maven { url 'https://dl.bintray.com/kotlin/ktor' }
}

dependencies {
    compile project(":core")
    shadow project(":plugins:loaders:directory-loader")

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.0'
    compile 'io.github.microutils:kotlin-logging:1.5.4'

    compile "io.ktor:ktor-gson:$ktor_version"

    compile "org.pf4j:pf4j:2.4.0"

    testCompile "org.junit.jupiter:junit-jupiter-api:5.2.0"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.2.0"
}

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

shadowJar {
    baseName = 'configuration-server'
    version = null
    classifier = null
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}