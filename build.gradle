buildscript {
    ext.kotlin_version = "1.3.0"

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.15.0" apply false
}

subprojects { subProject ->
    if (subProject.name != "plugins") {
        repositories {
            jcenter()
            maven { url "https://dl.bintray.com/kotlin/ktor" }
        }

        group 'me.marolt'
        version '0.1-SNAPSHOT'

        apply plugin: "com.diffplug.gradle.spotless"
        apply plugin: "kotlin"

        dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
            implementation "io.github.microutils:kotlin-logging:1.6.10"

            testApi "org.junit.jupiter:junit-jupiter-api:5.2.0"
            testImplementation "org.junit.jupiter:junit-jupiter-engine:5.2.0"
            testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:2.11.0"
        }

        sourceCompatibility = 1.8

        compileKotlin {
            kotlinOptions.jvmTarget = "1.8"
        }
        compileTestKotlin {
            kotlinOptions.jvmTarget = "1.8"
        }

        test {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed"
            }

            reports {
                html.enabled = true
            }
        }

        spotless {
            kotlin {
                target "**/*.kt"
                ktlint()

                licenseHeaderFile "${rootProject.projectDir}/LICENSE"		// License header file
            }
        }
    }
}


task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                if (configuration.isCanBeResolved()) {
                    configuration.resolve()
                }
            }
            subProject.configurations.each { configuration ->
                if (configuration.isCanBeResolved()) {
                    configuration.resolve()
                }
            }
        }
    }
}